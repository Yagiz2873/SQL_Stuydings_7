/*

 Yeni view oluşturup bu view'ı drop et

  playgrounddb aktif

   CREATE VIEW VIEW_CustomerOrders_YE AS
   SELECT * FROM Categories

   SELECT * FROM VIEW_CustomerOrders_YE

   DROP VIEW VIEW_CustomerOrders_YE

  Örnek:

  paygrounddb aktif

  CREATE VIEW VIEW_CustomerOrders_YE AS
  SELECT c.CustomerID, c.ContactName, o.OrderID, o.OrderDate FROM Customers c
  INNER JOIN Orders o ON c.CustomerID = o.CustomerID

  SELECT * FROM VIEW_CustomerOrders_YE

  DROP VIEW VIEW_CustomerOrders_YE

  Örnek: Başka bir veritabanından (flodb) tablosunu çek view oluşturup tabloyu view'a aktar sonra view'ı sil 

  playgrounddb aktif

  CREATE VIEW VIEW_FLOTABLE_YE AS
  SELECT * FROM flodb.dbo.flo

  SELECT * FROM VIEW_FLOTABLE_YE 

  DROP VIEW VIEW_FLOTABLE_YE


  Information_Schema Examples

  
   1-) SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_NAME = 'Customers'

    2-) SELECT COUNT(*) Miktar , (SELECT COUNT(COLUMN_NAME) FROM INFORMATION_SCHEMA.COLUMNS
  WHERE TABLE_NAME = 'Customers') Degisken_Sayisi
  FROM Customers
 


   3-)  SELECT * FROM INFORMATION_SCHEMA.TABLES
  WHERE lower(TABLE_NAME) LIKE '%customer%'

  4-) SELECT TABLE_NAME, COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
 WHERE DATA_TYPE = 'datetime'

 5-) SELECT TABLE_NAME,COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
 WHERE IS_NULLABLE = 'NO'

 6-) SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
 WHERE CONSTRAINT_TYPE = 'PRIMARY KEY'

 7-) SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
 WHERE ORDINAL_POSITION = '1'

 8-) SELECT TABLE_NAME, COLUMN_NAME, CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS
 WHERE DATA_TYPE = 'nvarchar' AND CHARACTER_MAXIMUM_LENGTH > 60


  CRUD EXAMPLES

  SELECT *
INTO NewProducts_YE
FROM Products
WHERE SupplierID = 2
 
SELECT * FROM NewProducts_YE

ALTER TABLE NewProducts_YE ADD StockSize AS (UnitPrice*UnitsInStock) 

SELECT SUM(StockSize) FROM NewProducts_YE
ALTER TABLE NewProducts_YE DROP COLUMN StockSize


SELECT * FROM NewProducts_YE

UPDATE NewProducts_YE 
SET UnitPrice = (SELECT UnitPrice FROM NewProducts_YE WHERE ProductID = 4) * 1.1
WHERE ProductID = 4

DROP TABLE NewProducts_YE 


SQL GENEL ALIŞTIRMA


SELECT * FROM Customers

 -- Veritabanı Oluşturma
CREATE DATABASE HR;

-- PERSON Tablosunu Oluşturma
CREATE TABLE PERSON_YE (
    ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CODE VARCHAR(50),
    TCNUMBER VARCHAR(50),
    NAME1 VARCHAR(50),
    SURNAME VARCHAR(50),
    GENDER VARCHAR(1),
    BIRTHDATE DATE,
    INDATE DATE,
    OUTDATE DATE,
    DEPARTMENTID INT,
    POSITIONID INT,
    PARENTPOSITIONID INT,
    MANAGERID INT,
    TELNR VARCHAR(15),
    SALARY FLOAT
);

SELECT * FROM PERSON_YE



INSERT INTO PERSON_YE (CODE, TCNUMBER, NAME1, SURNAME, GENDER, BIRTHDATE, INDATE, OUTDATE, DEPARTMENTID, POSITIONID, PARENTPOSITIONID, MANAGERID, TELNR, SALARY) 
VALUES ('001', '12345678901', 'Ahmet', 'Yılmaz', 'E', '1980-01-01', '2020-01-01', NULL, 1, 1, NULL, NULL, '05555555555', 7000);

INSERT INTO PERSON_YE (CODE, TCNUMBER, NAME1, SURNAME, GENDER, BIRTHDATE, INDATE, OUTDATE, DEPARTMENTID, POSITIONID, PARENTPOSITIONID, MANAGERID, TELNR, SALARY) 
VALUES ('002', '12345678902', 'Ayşe', 'Kara', 'K', '1985-05-05', '2021-02-01', NULL, 2, 2, NULL, 1, '05555555556', 5000);

INSERT INTO PERSON_YE (CODE, TCNUMBER, NAME1, SURNAME, GENDER, BIRTHDATE, INDATE, OUTDATE, DEPARTMENTID, POSITIONID, PARENTPOSITIONID, MANAGERID, TELNR, SALARY) 
VALUES ('003', '12345678903', 'Mehmet', 'Çelik', 'E', '1990-03-03', '2019-03-01', '2021-12-31', 3, 3, NULL, 1, '05555555557', 6000);



-- DEPARTMENT Tablosunu Oluşturma
CREATE TABLE DEPARTMENT_YE (
    ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    DEPARTMENT VARCHAR(50)
);

SELECT * FROM DEPARTMENT_YE

INSERT INTO DEPARTMENT_YE (DEPARTMENT) VALUES ('Muhasebe');
INSERT INTO DEPARTMENT_YE (DEPARTMENT) VALUES ('İnsan Kaynakları');
INSERT INTO DEPARTMENT_YE (DEPARTMENT) VALUES ('IT');

SELECT * FROM DEPARTMENT_YE

-- POSITION Tablosunu Oluşturma
CREATE TABLE POSITION_YE (
    ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    POSITION VARCHAR(50)
);

SELECT * FROM POSITION_YE

INSERT INTO POSITION_YE (POSITION) VALUES ('Müdür');
INSERT INTO POSITION_YE (POSITION) VALUES ('Yardımcı');
INSERT INTO POSITION_YE (POSITION) VALUES ('Uzman');

SELECT * FROM POSITION_YE


-- PRATIK YAPALIM (EVDE :)
----------------------
----------------------



-- OUTDATE'i NULL olan kişileri sorgulama 
SELECT * FROM PERSON_YE WHERE OUTDATE IS NULL;

-- Her departmanda çalışan kişi sayısı
SELECT DEPARTMENT, COUNT(P.ID) AS NEMP 
FROM PERSON_YE P 
INNER JOIN DEPARTMENT_YE D ON P.DEPARTMENTID = D.ID 
WHERE OUTDATE IS NULL 
GROUP BY DEPARTMENT;

-- Cinsiyete ve departmana göre çalışan sayısı
SELECT GENDER, DEPARTMENT, COUNT(P.ID) AS NEMP 
FROM PERSON_YE P 
INNER JOIN DEPARTMENT_YE D ON P.DEPARTMENTID = D.ID 
WHERE OUTDATE IS NULL 
GROUP BY GENDER, DEPARTMENT;

-- Tüm departmanları listeleme
SELECT * FROM DEPARTMENT_YE;

-- Tüm personel bilgilerini listeleme
SELECT * FROM PERSON_YE;

-- Tüm pozisyonları listeleme
SELECT * FROM POSITION_YE;

-- Belirli bir pozisyonda çalışanların maaş istatistikleri
SELECT PS.POSITION, MAX(P.SALARY) AS MAKS, MIN(P.SALARY) AS MINU, AVG(P.SALARY) AS AVAG 
FROM PERSON_YE P 
INNER JOIN POSITION_YE PS ON P.POSITIONID = PS.ID 
WHERE PS.POSITION IN ('Uzman') 
GROUP BY PS.POSITION; 

-- Belirli bir pozisyondaki en düşük, en yüksek ve ortalama maaş
SELECT POS.POSITION, MIN(P.SALARY) AS MIN_SALARY, MAX(P.SALARY) AS MAX_SALARY, ROUND(AVG(P.SALARY), 0) AS AVG_SALARY
FROM POSITION_YE POS
JOIN PERSON_YE P ON P.POSITIONID = POS.ID
WHERE POS.POSITION = 'Uzman'
GROUP BY POS.POSITION;

-- Pozisyonlara göre kişi sayısı ve ortalama maaş
SELECT POS.POSITION, COUNT(*) AS PERSONCOUNT, ROUND(AVG(SALARY), 0) AS AVG_SALARY 
FROM POSITION_YE POS
JOIN PERSON_YE P ON P.POSITIONID = POS.ID
WHERE OUTDATE IS NULL
GROUP BY POS.POSITION; 

-- Cinsiyete göre giriş yılı ve kişi sayısı
SELECT DATEPART(YEAR, INDATE) AS GİRİŞYILI, GENDER AS CİNSİYET, COUNT(P.ID)
FROM PERSON_YE P 
GROUP BY DATEPART(YEAR, INDATE), GENDER 
ORDER BY GİRİŞYILI ASC;

-- Ortalama maaşın 5500'den fazla olduğu departmanlar
SELECT D.DEPARTMENT, AVG(SALARY) AS ORTMAAŞ 
FROM PERSON_YE P 
INNER JOIN DEPARTMENT_YE D ON P.DEPARTMENTID = D.ID  
GROUP BY D.DEPARTMENT
HAVING AVG(SALARY) > 5500;

-- Departmanlara göre ortalama çalışma süresi
SELECT DEPARTMENT, ROUND(AVG(WORKINGTIME), 0) AS AVG_WORKINGTIME 
FROM (
    SELECT D.DEPARTMENT,
    CASE
        WHEN OUTDATE IS NOT NULL THEN DATEDIFF(MONTH, INDATE, OUTDATE)
        ELSE DATEDIFF(MONTH, INDATE, GETDATE())
    END AS WORKINGTIME
    FROM PERSON_YE P
    JOIN DEPARTMENT_YE D ON P.DEPARTMENTID = D.ID
) T
GROUP BY DEPARTMENT
ORDER BY AVG_WORKINGTIME DESC; 



-- CRUD
----------------------
----------------------

SELECT * FROM PERSON_YE

-- PERSON tablosuna yeni bir sütun eklemek: Email
ALTER TABLE PERSON_YE
ADD Email VARCHAR(100);

-- ID'si 1 olan kişinin maaşını ve email adresini güncellemek
UPDATE PERSON_YE
SET SALARY = 8500, Email = 'ahmet.yilmaz@example.com'
WHERE ID = 1;

-- Tüm personelin telefon numarasını güncellemek
UPDATE PERSON_YE
SET TELNR = '05555555559'
WHERE TELNR IS NOT NULL;


-- PERSON tablosuna Status sütunu ekleme ve varsayılan değer ayarlama
ALTER TABLE PERSON_YE
ADD Status VARCHAR(10) NOT NULL DEFAULT 'Aktif';


ALTER TABLE PERSON_YE 
ADD FULLNAME AS (NAME1 + ' ' + SURNAME);

-- OUTDATE belirlenmiş kişilerin durumunu Pasif olarak güncelleme
UPDATE PERSON_YE
SET Status = 'Pasif'
WHERE OUTDATE IS NOT NULL;

-- 30 yaşından büyük kişilerin maaşına %10 zam yapma
UPDATE PERSON_YE
SET SALARY = SALARY * 1.10
WHERE YEAR(GETDATE()) - YEAR(BIRTHDATE) > 30; 


CRM ANALİZİ ÖRNEK






 */

 SELECT * FROM flodb.dbo.flo

SELECT * FROM flodb.INFORMATION_SCHEMA.COLUMNS

SELECT COLUMN_NAME, DATA_TYPE FROM flodb.INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'flo'

SELECT *
INTO FLO_YE
FROM flodb.dbo.flo

SELECT * FROM FLO_YE

ALTER TABLE FLO_YE ADD total_order_num as (order_num_total_ever_online + order_num_total_ever_offline)
ALTER TABLE FLO_YE ADD total_value_num as (customer_value_total_ever_online + customer_value_total_ever_offline)

SELECT order_channel, COUNT(master_id), ROUND(AVG(total_order_num),0) adet , ROUND(AVG(total_value_num),0) ciro  FROM FLO_YE
GROUP BY order_channel

SELECT TOP 10 * FROM FLO_YE ORDER BY total_order_num DESC

SELECT TOP 10 * FROM FLO_YE ORDER BY total_value_num DESC

SELECT * FROM FLO_YE

SELECT MAX(last_order_date) Son_Alisveris_Tarihi FROM FLO_YE

-- 01.06.2021


DROP TABLE RFM_YE

SELECT
master_id as CustomerId,
DATEDIFF(DAY,last_order_date,'20210601') as Recency,
total_order_num as Frequency,
total_value_num as Monetary,
NULL FREQUENCY_SCORE ,
NULL RECENCY_SCORE,
NULL MONETARY_SCORE
INTO RFM_YE
FROM FLO_YE

SELECT * FROM RFM_YE

UPDATE RFM_YE SET RECENCY_SCORE = 
(SELECT SCORE FROM 
  ( SELECT A.*,
              NTILE(5) OVER(ORDER BY Recency DESC) AS SCORE
              FROM RFM_YE AS A

  ) T
  WHERE T.CustomerId = RFM_YE.CustomerId
)

UPDATE RFM_YE SET FREQUENCY_SCORE = 
(SELECT SCORE FROM 
  ( SELECT A.*,
              NTILE(5) OVER(ORDER BY Frequency ) AS SCORE
              FROM RFM_YE AS A

  ) T
  WHERE T.CustomerId = RFM_YE.CustomerId
)

UPDATE RFM_YE SET MONETARY_SCORE = 
(SELECT SCORE FROM 
  ( SELECT A.*,
              NTILE(5) OVER(ORDER BY Monetary ) AS SCORE
              FROM RFM_YE AS A

  ) T
  WHERE T.CustomerId = RFM_YE.CustomerId 
)

SELECT * FROM RFM_YE

ALTER TABLE RFM_YE ADD RFM_SCORE AS (CONVERT(VARCHAR,RECENCY_SCORE) + CONVERT(VARCHAR,FREQUENCY_SCORE) + CONVERT(VARCHAR,MONETARY_SCORE))

ALTER TABLE RFM_YE ADD SEGMENT VARCHAR(50)

UPDATE RFM_YE SET SEGMENT = 'Hibernating'
WHERE RECENCY_SCORE LIKE '[1-2]%' AND FREQUENCY_SCORE LIKE '[1-2]%' 